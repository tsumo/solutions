#!/usr/bin/env python3

"""
Decoding a message on a punch card.
"""

decode_table1 = {
    'Y': '&',
    'X': '-',
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
}

decode_table2 = {
    'Y': {
        1: 'A',
        2: 'B',
        3: 'C',
        4: 'D',
        5: 'E',
        6: 'F',
        7: 'G',
        8: 'H',
        9: 'I',},
    'X': {
        1: 'J',
        2: 'K',
        3: 'L',
        4: 'M',
        5: 'N',
        6: 'O',
        7: 'P',
        8: 'Q',
        9: 'R',},
    0: {
        1: '/',
        2: 'S',
        3: 'T',
        4: 'U',
        5: 'V',
        6: 'W',
        7: 'X',
        8: 'Y',
        9: 'Z'},
    2: {8: ':'},
    3: {8: '#'},
    4: {8: '@'},
    5: {8: "'"},
    6: {8: '='},
    7: {8: '"'},
}

decode_table3 = {
    'Y': {
        2: {8: '['},
        3: {8: '.'},
        4: {8: '<'},
        5: {8: '('},
        6: {8: '+'},
        7: {8: '!'},},
    'X': {
        2: {8: ']'},
        3: {8: '$'},
        4: {8: '*'},
        5: {8: ')'},
        6: {8: ';'},
        7: {8: '^'},},
    0: {
        2: {8: '\\'},
        3: {8: ','},
        4: {8: '%'},
        5: {8: '_'},
        6: {8: '>'},
        7: {8: '?'},},
}

def decode_char(char):
    if len(char) == 1:
        return str(decode_table1[char[0]])
    if len(char) == 2:
        return str(decode_table2[char[0]][char[1]])
    if len(char) == 3:
        return str(decode_table3[char[0]][char[1]][char[2]])

message = [
    ['Y', 6], ['X', 3], ['Y', 1], ['Y', 7], ['X'],

    ['Y', 4], ['Y', 2], ['X'], ['Y', 9], ['X', 5],

    ['Y', 4], ['Y', 5], [0, 7], [2, 8], [3],

    [8], [0], [1], [0, 3, 8], [0, 5],

    ['Y', 1], ['X', 3], [2, 8], ['Y', 6], ['X', 3],

    ['Y', 1], ['Y', 7], ['X'], ['Y', 2], [4],

    [9], [3], [8], [0], [1],

    ['Y', 3], ['Y', 4], ['Y', 2], ['X'], [8],

    [3], [1], ['Y', 1], ['Y', 2], ['Y', 4],

    ['Y', 4], ['Y', 6], ['Y', 1], [6], [2],

    [8], ['Y', 1], ['Y', 3], [3], [1],
]

print(''.join(map(decode_char, message)))

